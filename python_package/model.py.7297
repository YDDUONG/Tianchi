import os
import keras
import time
import subprocess
from keras.layers import Dense,GlobalAveragePooling2D,Dropout,BatchNormalization
from keras.applications import MobileNet,VGG16,InceptionV3,InceptionResNetV2,NASNetLarge
from keras.preprocessing import image
from keras import regularizers
from keras.applications.nasnet import preprocess_input
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Model
from keras.optimizers import Adam

from tensorflow.python.saved_model import builder as saved_model_builder
from tensorflow.python.saved_model import (signature_constants,
                                           signature_def_utils, tag_constants,
                                           utils)

os.environ["TF_XLA_FLAGS"] = "--tf_xla_cpu_global_jit"
import tensorflow as tf

TRAIN_DIR = os.environ['IMAGE_TRAIN_INPUT_PATH']


os.system('pwd')
h5_file=subprocess.check_output("find .. -name 'model_20191106_rubbish_architecture*' -print", shell=True)
h5_weights_file=subprocess.check_output("find .. -name 'model_20191106_rubbish_weights*' -print", shell=True)

from keras.models import model_from_json
with open(h5_file.rstrip(), 'r') as file:
    json_string = file.read().replace('\n', '')
    model = model_from_json(json_string)

#base_model=NASNetLarge(weights='imagenet',include_top=False) #imports the mobilenet model and discards the last 1000 neuron layer.
#x=base_model.output
#x=GlobalAveragePooling2D()(x)
#x = Dense(2048, activation='relu', kernel_regularizer=regularizers.l2(0.0001))(x)
#x=Dropout(0.5)(x) #dropout layer 3
#x=Dense(2048,activation='tanh')(x) #dense layer 4
#preds=Dense(100,activation='softmax')(x) #final layer with softmax activation
#model=Model(inputs=base_model.input,outputs=preds)

model.load_weights(h5_weights_file.rstrip(), by_name=True)

for layer in model.layers:
    layer.trainable=False
for layer in model.layers[1039:]:
    print layer.name
    layer.trainable=True

train_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)

train_generator=train_datagen.flow_from_directory(TRAIN_DIR,
                                                 target_size=(331,331),
                                                 color_mode='rgb',
                                                 batch_size=32,
                                                 class_mode='categorical',
                                                 shuffle=True)

#print(train_generator.class_indices)

model.compile(optimizer='Adamax',loss='categorical_crossentropy',metrics=['accuracy'])
step_size_train=train_generator.n//train_generator.batch_size
model.fit_generator(generator=train_generator,
                   steps_per_epoch=step_size_train,
                   epochs=13
                   )

export_dir=os.environ['MODEL_INFERENCE_PATH']
tf.keras.models.save_model(model, './test.h5')

time.sleep(10)

save_model = tf.keras.models.load_model('./test.h5')
tf.contrib.saved_model.save_keras_model(save_model, export_dir + '/SavedModel')
